from qiskit.compiler import transpile
from qiskit.visualization import plot_gate_map
import matplotlib.pyplot as plt
from qiskit import QuantumCircuit
from qiskit import Aer, execute
from qiskit.circuit.random import random_circuit
import random
import os
from qiskit.providers.fake_provider import FakeSherbrooke
import re

# This sorts our ciruits in ascending ordering via number of qubits
num = re.compile(r'(\d+)')
def ascending_sort(val):
    split = num.split(val)
    split[1::2] = map(int, split[1::2])
    return split

# Path to the circuits stored locally
def file_reader(file_path):
    circuits = []
    directory = file_path
    for circuit in sorted(os.listdir(directory), key=ascending_sort):
        circuit_path = file_path + "/" + circuit
        if (circuit_path.endswith('.qasm')):
            print(circuit_path)
            qc = QuantumCircuit.from_qasm_file(circuit_path)
            circuits.append(qc)

    return circuits

# Select your backend (e.g., Aer's qasm_simulator)
backend = FakeSherbrooke()

# Read circuits from files
circuits = file_reader("tests")

def gate_counter(circuits):
    # Transpile each circuit, count the gates, and store the results
    gate_counts = []
    opt1 = []
    opt2 = []
    opt3 = []
    for circuit in circuits:
        # stores the number of gates 
        transpiled_circuit_1 = transpile(circuit, backend, optimization_level=1)
        transpiled_circuit_2 = transpile(circuit, backend, optimization_level=2)
        transpiled_circuit_3 = transpile(circuit, backend, optimization_level=3)

        # counts the number of gates in a given circuit
        opt1_count = transpiled_circuit_1.count_ops()
        opt2_count = transpiled_circuit_2.count_ops()
        opt3_count = transpiled_circuit_3.count_ops()

        # appends our count of the transpiled circuit to the array
        opt1.append(sum(opt1_count.values()))
        opt2.append(sum(opt2_count.values()))
        opt3.append(sum(opt3_count.values()))


    # Generate a graph to visualize the gate counts for optimization level 1
    plt.plot(range(1, len(circuits) + 1), opt1, label = "Optimization Level 1")
    plt.plot(range(1, len(circuits) + 1), opt2, label = "Optimization Level 2")
    plt.plot(range(1, len(circuits) + 1), opt3, label = "Optimization Level 3")
    plt.xlabel('Circuit')
    plt.ylabel('Gate Count')
    plt.title('Gate Count of Transpiled Circuits')
    plt.xticks(range(1, len(circuits) + 1))
    plt.legend()
    plt.show()

gate_counter(circuits)
