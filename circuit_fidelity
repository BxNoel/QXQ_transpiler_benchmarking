from qiskit import QuantumCircuit, Aer, execute
from qiskit.compiler import transpile
from qiskit.quantum_info import state_fidelity
import matplotlib.pyplot as plt
import os

# Specify the path to the folder containing QASM circuits
folder_path = '/Users/catherinelozano/Downloads/MQTBench_2023-07-13-01-22-35'

# Select your backend (e.g., Aer's qasm_simulator)
backend = Aer.get_backend('qasm_simulator')

# Read the QASM circuits from the folder
circuits = []
for file_name in os.listdir(folder_path):
    file_path = os.path.join(folder_path, file_name)
    with open(file_path, 'r') as file:
        qasm_str = file.read()
        circuit = QuantumCircuit.from_qasm_str(qasm_str)
        circuits.append(circuit)

# Transpile each circuit, execute, and measure the fidelity
fidelities = []
for circuit in circuits:
    transpiled_circuit = transpile(circuit, backend)
    reference_state = execute(reference_circuit, backend).result().get_statevector()
    circuit_state = execute(transpiled_circuit, backend).result().get_statevector()
    fidelity = state_fidelity(reference_state, circuit_state)
    fidelities.append(fidelity)

# Generate a graph to visualize the circuit fidelities
plt.plot(range(1, len(circuits) + 1), fidelities, marker='o')
plt.xlabel('Circuit')
plt.ylabel('Circuit Fidelity')
plt.title('Circuit Fidelity after Transpilation')
plt.xticks(range(1, len(circuits) + 1))
plt.show()
