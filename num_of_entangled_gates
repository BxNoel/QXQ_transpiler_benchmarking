from qiskit import QuantumCircuit, Aer
from qiskit.compiler import transpile
from qiskit.visualization import plot_gate_map
import matplotlib.pyplot as plt

# Create a list of quantum circuits
circuits = [
    QuantumCircuit(2),
    QuantumCircuit(3),
    QuantumCircuit(4)
]

# Select your backend (e.g., Aer's qasm_simulator)
backend = Aer.get_backend('qasm_simulator')

# Transpile each circuit, count the entangled gates, and store the results
entangled_gate_counts = []
for circuit in circuits:
    transpiled_circuit = transpile(circuit, backend)
    entangled_gate_count = sum([1 for gate in transpiled_circuit if gate.num_qubits > 1])
    entangled_gate_counts.append(entangled_gate_count)

# Generate a graph to visualize the entangled gate counts
plt.plot(range(1, len(circuits) + 1), entangled_gate_counts, marker='o')
plt.xlabel('Circuit')
plt.ylabel('Entangled Gate Count')
plt.title('Entangled Gate Count of Transpiled Circuits')
plt.xticks(range(1, len(circuits) + 1))
plt.show()
